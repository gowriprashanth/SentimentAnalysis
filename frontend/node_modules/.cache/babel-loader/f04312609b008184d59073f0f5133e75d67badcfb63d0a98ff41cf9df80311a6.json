{"ast":null,"code":"var _jsxFileName = \"/Users/gowriprashanth/sentiment-analysis/src/ImageUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUpload = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const onFileChange = event => {\n    // Update the state\n    setSelectedFile(event.target.files[0]);\n  };\n  const onFileUpload = () => {\n    // Check if a file is selected\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onloadend = function () {\n        const base64String = reader.result.replace('data:', '').replace(/^.+,/, '');\n        axios.post(\"https://8cixrhnhu1.execute-api.us-east-1.amazonaws.com/dev/upload-image\", {\n          body: base64String // Assuming the API expects a JSON object with a base64 string\n        }).then(response => {\n          console.log(\"File uploaded successfully\", response);\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"upload successfully\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }, this);\n        }).catch(error => {\n          console.error(\"Error uploading file\", error);\n          // You can add code here to handle the upload error, such as setting state or displaying a message.\n        });\n      };\n\n      reader.readAsDataURL(selectedFile);\n    } else {\n      console.log('Please select a file to upload');\n      // You can add code here to handle the case where no file is selected before upload.\n    }\n  };\n\n  // File content to be displayed after file upload is complete\n  const fileData = () => {\n    if (selectedFile) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"File Details:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"File Name: \", selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"File Type: \", selectedFile.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last Modified: \", selectedFile.lastModifiedDate.toDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Select a file before pressing the upload button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload an Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFileUpload,\n      children: \"Upload!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), fileData()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUpload, \"cz3B5sQOxlrekAnUFUPeMaA2gqY=\");\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUpload","_s","selectedFile","setSelectedFile","onFileChange","event","target","files","onFileUpload","reader","FileReader","onloadend","base64String","result","replace","post","body","then","response","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","catch","error","readAsDataURL","fileData","name","type","lastModifiedDate","toDateString","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/gowriprashanth/sentiment-analysis/src/ImageUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst ImageUpload = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const onFileChange = event => {\n    // Update the state\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const onFileUpload = () => {\n    // Check if a file is selected\n    if (selectedFile) {\n      const reader = new FileReader();\n      \n      reader.onloadend = function() {\n        const base64String = reader.result\n          .replace('data:', '')\n          .replace(/^.+,/, '');\n\n        axios.post(\"https://8cixrhnhu1.execute-api.us-east-1.amazonaws.com/dev/upload-image\", {\n          body: base64String // Assuming the API expects a JSON object with a base64 string\n        })\n        .then(response => {\n          console.log(\"File uploaded successfully\", response);\n          return(\n          <p>upload successfully</p>\n          );\n        })\n        .catch(error => {\n          console.error(\"Error uploading file\", error);\n          // You can add code here to handle the upload error, such as setting state or displaying a message.\n        });\n      };\n      \n      reader.readAsDataURL(selectedFile);\n    } else {\n      console.log('Please select a file to upload');\n      // You can add code here to handle the case where no file is selected before upload.\n    }\n  };\n\n  // File content to be displayed after file upload is complete\n  const fileData = () => {\n    if (selectedFile) {\n      return (\n        <div>\n          <h2>File Details:</h2>\n          <p>File Name: {selectedFile.name}</p>\n          <p>File Type: {selectedFile.type}</p>\n          <p>Last Modified: {selectedFile.lastModifiedDate.toDateString()}</p>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h4>Select a file before pressing the upload button</h4>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h1>Upload an Image</h1>\n      <input type=\"file\" onChange={onFileChange} />\n      <button onClick={onFileUpload}>\n        Upload!\n      </button>\n      {fileData()}\n    </div>\n  );\n}\n\nexport default ImageUpload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}